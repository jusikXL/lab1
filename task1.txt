# Task 1

## **1. `insert`**

Fixed solution:
```
public void insert(int x) {
   for (int i = 0; i < a.size(); i++) {
         if (a.get(i) > x) {
            a.add(i, x); // statement 1
            return; // statement 2
         } else {
            if (a.get(i) == x) {
               return; // statement 3
            }
         }
   }
   a.add(x); // statement 4
}
```

**`testInsert` stream:**

1. Inserting an element into an empty set (`10`).

   —> Branch: not entering the for-loop, Statement: 4

2. Inserting a smaller element than the current minimum (`5`).

   —> Brach: going into the for-loop and if-statement, Statements: 1,2

3. Attempting to insert a duplicate element (`5` again).

   —> Branch: going into the for-loop and else-if-statement, Statement 3

4. Inserting a larger element than the current maximum (`15`).

   —> Branch: going into the for-loop and leaving it, Statement 4

**Bugs found:** The original code could insert duplicates or incorrectly add elements to the end of the list even after they were inserted in the correct position.

**Fix:** Replaced `break` with `return` to ensure the method exits immediately after handling insertion or detecting duplicates.

## **2. `member`**

```
public boolean member(int x) {
   for (int i = 0; i < a.size(); i++) {
      if (a.get(i) > x) {
            return false; // statement 1
      } else {
            if (a.get(i) == x) {
               return true; // statement 2
            }
      }
   }
   return false; // statement 3
}
```

**`testMember` stream:**

1. Test membership in an empty set (`123`).

   —> Branch: not entering the for-loop, Statement 3

2. Test membership for a non-existent element larger than the maximum in the set (`10`).

   —> Branch: going into the for-loop and leaving it, Statement 3

3. Test membership for a non-existent element smaller than the minimum in the set (`3`).

   —> Branch: going into the for-loop and if-statement, Statement 1

4. Test membership for an existing element in the set (`5`).

   —> Branch: going into the for-loop and else-if-statement, Statement 2

**Bugs found:** none.

**Fix:** none.

## **3. `intersect`**
Fixed solution:
```
public void intersect(Set s) {
	if (a.size() == 0 || s.a.size() == 0) {
		a = new ArrayList<Integer>(); // statement 1
		return; // statement 1.1
   }
   
   ArrayList<Integer> intersection = new ArrayList<>(); // statement 2

for (int i = 0, j = 0; i < a.size() && j < s.a.size();) {
   if (a.get(i).equals(s.a.get(j))) {
         intersection.add(a.get(i)); // statement 3
         i++; // statement 3.1
         j++; // statement 3.2
   } else if (a.get(i) < s.a.get(j)) {
         i++; // statement 4
   } else {
         j++; // statement 5
   }
}

a = intersection; // statement 6
}
```

**`testIntersect` stream:**

1. Intersect a larger set with a smaller one ({1,2,3,5} intersects {1,3})

   —> Branch: go into for-loop, if-statement, else-if and else, Statement 2, 3, 3.1, 3.2 , 4, 5, 6

2. Intersect a smaller set with a larger one ({1,3} intersects {1,2,5})

   —> Branch: cover for-loop, Statement 3,3.1,3.2, 4, 5, 6

3. Intersect an empty set with a non-empty set ({1} intersects {})

   —> Branch: go into first if because second set is empty: Statement 1,1.1

4. Intersect a non-empty set with an empty set ({} intersects {1,2,5}) - not necessary, additional test case

   —> Branch: go into first if because first set is empty, Statement 1,1.1

**Bug:** The original code modifies the list during iteration by removing elements, which can cause incorrect index shifting.

**Fix:** Replaced the in-place modification with a new list to store the intersection, avoiding index shifting problems.

## **4. `distinctClosed`**
Fixed solution:
```
public boolean distinctClosed(IntBinaryOperator f) {
   int vi, vj; // statement 1
   for (int i = 0; i < a.size(); i++) {
      for (int j = i + 1 /* consider only distinct pairs */; j < a.size(); j++) {
         vi = a.get(i); // statement 2
         vj = a.get(j); // statement 3
         if (!(member(f.applyAsInt(vi, vj)))) {
            return false; // statement 4
         }
      }
   }
   return true; // statement 5
}
```

**`distinctClosed` test add %5 stream:**

1. Test with an empty set.

   —> Branch: not going into the for-loops Statement 1, 5

2. Test with one element in the set (`{0}`).

   —> Branch: going into and out of only the i for loop, Statement 1, 5

3. Test with two elements that satisfy the condition (`{0, 1}` using addition).

   —> Branch: going into and out of the i and j for loops, Statement 1, 2, 3, 5

4. Test with three elements where the condition fails (`{0, 1, 2}` using addition).

   —> Branch: going into the i and j for loops and if-statement, Statement 1, 2, 3, 4

**`distinctClosed` test substract %5 stream:**

1. Test with an empty set.

   —> Branch: not going into the for-loops Statement 1, 5

2. Test with one element in the set (`{0}`).

   —> Branch: going into and out of only the i for loop, Statement 1, 5

3. Test with two elements that satisfy the condition (`{0, 1, -1}` using substraction).

   —> Branch: going into and out of the i and j for loops, Statement 1, 2, 3, 5

4. Test with three elements where the condition fails (`{0, 1, -1, 2}` using substraction).

   —> Branch: going into the i and j for loops and if-statement, Statement 1, 2, 3, 4

**Bug:** In the original code, it checked even for the same elements (when vi == vj) and immediately returned false, which is not a supposed behaviour.

**Fix:** Updated the loop to start `j` from `i + 1` and the if condition ensuring only distinct pairs of elements are considered for the operation.
```
